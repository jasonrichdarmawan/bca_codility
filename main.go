package main

import (
	"fmt"
	"strings"
)

// you can also use imports, for example:
// import "fmt"
// import "os"

// you can write to stdout for debugging purposes, e.g.
// fmt.Println("this is a debug message")

func Solution(S string) int {
	// Implement your solution here
	S = strings.TrimLeft(S, "0")
	zerosCount := strings.Count(S, "0")
	onesCount := strings.Count(S, "1")

	return zerosCount + 2*(onesCount) - 1
}

func main() {
	fmt.Println(Solution("011100"))
	fmt.Println(Solution("111"))
	fmt.Println(Solution("1111010101111"))
	fmt.Println(Solution

	fmt.Println(Solution("000001")) // 1 -> 0 (1 operation)
	//					  ------
	//						   1 operation to zeroed it.

	fmt.Println(Solution("000010")) // 2 -> 1 -> 0 (2)
	//					  ------
	//						  1+1

	fmt.Println(Solution("000100")) // 4 -> 2 -> 1 -> 0 (3)
	//					  ------
	//						 1+2

	fmt.Println(Solution("001100")) // 12 -> 6 -> 3 -> 2 -> 1 -> 0 (5)
	//					  ------
	//						3+2

	fmt.Println(Solution("011100")) // 28 -> 14 -> 7 -> 6 -> 3 -> 2 -> 1 -> 0 (7)
	//					  ------
	//					   5+2

	// zeroes = 1 * occurance
	// ones = 2 * occurance - 1

	// why zeroes = 1 * occurance
	// why ones = 2 * occurance - 1?

	// i.e. you have a number, 2:
	// binary representation of 2: 0010
	// 2 -> 1 -> 0 (2 operation)

	// then, number 3:
	// binary representation of 3: 0011
	// 3 -> 2 -> 1 -> 0 (3 operation)

	// - 1 because the most right side of binary representation
	// determines whether the number is an odd or even number.

	// therefore,
	// even number require at least 2 operation to zeroed.
	// odd number require 1 operation to zeroed.

	// therefore,
	// 2 * occuranceOfOnes - 1
	// 1 * occuranceOfZeroes
	// ------------- +
	// number of operations to zeroed it.
}
